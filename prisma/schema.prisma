// npx prisma db push - To Sync MongoDB Atlas to Current Schema
// npx prisma studio - To Check the Data in a Seperate Port by Prisma
// npx prisma generate - To Generate Prisma Client
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
}

model Student {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  username  String     @unique
  name      String
  surname   String
  email     String?    @unique
  phone     String?    @unique
  address   String
  img       String?
  bloodType String
  gender    UserGender
  birthday  DateTime
  createdAt DateTime   @default(now())
  parentId  String     @db.ObjectId
  parent    Parent     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  classId   String     @db.ObjectId
  class     Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  gradeId   String     @db.ObjectId
  grade     Grade      @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Teacher {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  username       String           @unique
  name           String
  surname        String
  email          String?          @unique
  phone          String?          @unique
  address        String
  img            String?
  bloodType      String
  gender         UserGender
  birthday       DateTime
  createdAt      DateTime         @default(now())
  departments       Department[]        @relation(fields: [departmentIds], references: [id])
  departmentIds     String[]         @db.ObjectId
  subjects        Subject[]
  classes        Class[] // Supervisor for these classes
  TimeTableEntry TimeTableEntry[]
}

model Parent {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  level    Int       @unique
  students Student[]
  classes  Class[]
}

model Class {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  capacity      Int
  supervisorId  String?        @db.ObjectId
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
  subjects       Subject[]
  students      Student[]
  gradeId       String         @db.ObjectId
  grade         Grade          @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  events        Event[]
  announcements Announcement[]
  attendances   Attendance[]
  timeTableId   String?        @db.ObjectId
  timeTable     TimeTable?     @relation(fields: [timeTableId], references: [id], onDelete: Cascade)
}

model Department {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  teachers   Teacher[] @relation(fields: [teacherIds], references: [id])
  teacherIds String[]  @db.ObjectId
  subjects    Subject[]

  TimeTableEntry TimeTableEntry[]
}

model Subject {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  departmentId   String       @db.ObjectId
  department     Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacherId   String       @db.ObjectId
  teacher     Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  exams       Exam[]
  assignments Assignment[]
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime
  subjectId  String   @db.ObjectId
  subject    Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime
  subjectId  String   @db.ObjectId
  subject    Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Result {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  score        Int
  examId       String?     @db.ObjectId
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId String?     @db.ObjectId
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String      @db.ObjectId
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Attendance {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime
  classId           String   @db.ObjectId
  class             Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  presentStudentIds String[] @db.ObjectId

  @@unique([classId, date])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     String?  @db.ObjectId
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  classId     String?  @db.ObjectId
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model TimeTable {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  classId String           @unique
  Class   Class[]
  entries TimeTableEntry[]
}

model TimeTableEntry {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  timetableId String    @db.ObjectId
  timetable   TimeTable @relation(fields: [timetableId], references: [id], onDelete: Cascade)
  day         Day
  startTime   DateTime // Use a dummy date for time-of-day representation
  endTime     DateTime
  departmentId   String    @db.ObjectId
  department     Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  teacherId   String    @db.ObjectId
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([timetableId, day, startTime])
}

enum UserGender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
